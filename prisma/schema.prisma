datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/client"
}

// Enum Definitions

enum TaskStatus {
  OPEN
  IN_PROGRESS
  MARKED_AS_COMPLETED
  COMPLETED
}

enum TimelineType {
  WEEK
  DAY
}

enum TransactionType {
  BOUNTY
  SWAP_USDC
  SWAP_XLM
  WITHDRAWAL
  TOP_UP
}

// Model Definitions

model User {
  userId                 String                  @id
  username               String                  @unique
  walletAddress          String
  walletSecret           String
  contributionSummary    ContributionSummary?
  addressBook            Json[]                  @default([])
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  createdTasks           Task[]                  @relation("TaskCreator")
  contributedTasks       Task[]                  @relation("TaskContributor")
  projects               Project[]               @relation("UserProjects")
  userProjectPermissions UserProjectPermission[]
  transactions           Transaction[]
}

model ContributionSummary {
  id             String @id @default(cuid())
  tasksTaken     Int    @default(0)
  tasksCompleted Int    @default(0)
  averageRating  Float  @default(0.0)
  totalEarnings  Float  @default(0.0)
  // projectIds     String[]  @default([])
  // projects       Project[] @relation(fields: [projectIds], references: [id])
  userId         String @unique
  user           User   @relation(fields: [userId], references: [userId])
}

model SubscriptionPackage {
  id          String    @id @default(cuid())
  name        String
  description String
  maxTasks    Int
  maxUsers    Int
  paid        Boolean   @default(true)
  price       Float
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projects    Project[]
}

model Project {
  id                    String                  @id @default(cuid())
  name                  String
  description           String
  repoUrls              String[]
  walletAddress         String
  walletSecret          String
  escrowAddress         String
  escrowSecret          String
  subscriptionPackage   SubscriptionPackage?    @relation(fields: [subscriptionPackageId], references: [id])
  subscriptionPackageId String?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  tasks                 Task[]                  @relation("ProjectTasks")
  users                 User[]                  @relation("UserProjects")
  userProjectPermission UserProjectPermission[]
  transactions          Transaction[]
}

model Task {
  id            String        @id @default(cuid())
  no            Int           @default(autoincrement())
  creatorId     String
  contributorId String?
  project       Project       @relation("ProjectTasks", fields: [projectId], references: [id])
  projectId     String
  issue         Json
  timeline      Int?          @default(0)
  timelineType  TimelineType? @default(WEEK)
  bounty        Float         @default(0.0)
  acceptedAt    DateTime?
  completedAt   DateTime?
  status        TaskStatus    @default(OPEN)
  settled       Boolean       @default(false)
  pullRequests  String[]      @default([])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  creator       User          @relation("TaskCreator", fields: [creatorId], references: [userId])
  contributor   User?         @relation("TaskContributor", fields: [contributorId], references: [userId])
  transactions  Transaction[]
}

model Permission {
  code                  String                  @id
  name                  String
  isDefault             Boolean
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  userProjectPermission UserProjectPermission[] @relation("UserProjectPermissionPermissions")
}

model UserProjectPermission {
  id              String       @id @default(cuid())
  user            User         @relation(fields: [userId], references: [userId])
  userId          String
  project         Project      @relation(fields: [projectId], references: [id])
  projectId       String
  permissionCodes String[]
  assignedBy      String?
  assignedAt      DateTime     @default(now())
  permission      Permission[] @relation("UserProjectPermissionPermissions")
}

model Transaction {
  id       String          @id @default(cuid())
  category TransactionType
  amount   Float
  doneAt   DateTime        @default(now())

  // For BOUNTY transactions
  task   Task?   @relation(fields: [taskId], references: [id])
  taskId String?

  // For TOP_UP transactions
  sourceAddress String?

  // For WITHDRAWAL transactions
  destinationAddress String?

  // For TOP_UP and WITHDRAWAL transactions
  asset String?

  // For SWAP transactions
  assetFrom String?
  assetTo   String?

  // Balance tracking
  previousBalance Float
  newBalance      Float

  project   Project @relation(fields: [projectId], references: [id])
  projectId String
  user      User    @relation(fields: [userId], references: [userId])
  userId    String
}
