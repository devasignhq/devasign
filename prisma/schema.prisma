datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/client"
}

// Enum Definitions

enum TaskStatus {
  OPEN
  IN_PROGRESS
  MARKED_AS_COMPLETED
  COMPLETED
}

enum TimelineType {
  WEEK
  DAY
}

// Model Definitions

model User {
  userId              String               @id
  username            String               @unique
  walletAddress       String?
  walletSecret        String? // Store encrypted
  contributionSummary ContributionSummary?
  createdTasks        Task[]               @relation("TaskCreator")
  contributedTasks    Task[]               @relation("TaskContributor")
  projects            Project[]            @relation("UserProjects")
  addressBook         Json[]               @default([])
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
}

model ContributionSummary {
  id             String @id @default(cuid())
  tasksTaken     Int    @default(0)
  tasksCompleted Int    @default(0)
  averageRating  Float  @default(0.0)
  totalEarnings  Float  @default(0.0)
  // projectIds     String[]  @default([])
  // projects       Project[] @relation(fields: [projectIds], references: [id])
  userId         String @unique
  user           User   @relation(fields: [userId], references: [userId])
}

model Project {
  id            String   @id @default(cuid())
  name          String
  description   String
  repoUrl       String
  escrowAddress String?
  escrowSecret  String? // Store encrypted
  tasks         Task[]   @relation("ProjectTasks")
  users         User[]   @relation("UserProjects")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Task {
  id            String       @id @default(cuid())
  creatorId     String
  contributorId String?
  project       Project      @relation("ProjectTasks", fields: [projectId], references: [id])
  projectId     String
  issueUrl      String
  issueNumber   Int
  issueTitle    String
  issueLabel    String?
  timeline      Int?         @default(0)
  timelineType  TimelineType @default(WEEK)
  bounty        Float        @default(0.0)
  acceptedAt    DateTime?
  completedAt   DateTime?
  status        TaskStatus   @default(OPEN)
  settled       Boolean      @default(false)
  pullRequests  String[]     @default([])
  creator       User         @relation("TaskCreator", fields: [creatorId], references: [userId])
  contributor   User?        @relation("TaskContributor", fields: [contributorId], references: [userId])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}
