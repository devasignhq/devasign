datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/client"
}

// Enum Definitions

enum TaskStatus {
  OPEN
  IN_PROGRESS
  MARKED_AS_COMPLETED
  COMPLETED
}

enum TimelineType {
  WEEK
  DAY
}

enum TransactionCategory {
  BOUNTY
  SWAP_USDC
  SWAP_XLM
  WITHDRAWAL
  TOP_UP
}

// Model Definitions

model User {
  userId                 String                  @id
  username               String                  @unique
  walletAddress          String
  walletSecret           String
  contributionSummary    ContributionSummary?
  addressBook            Json[]                  @default([])
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  createdTasks           Task[]                  @relation("TaskCreator")
  contributedTasks       Task[]                  @relation("TaskContributor")
  projects               Project[]               @relation("UserProjects")
  userProjectPermissions UserProjectPermission[]
  transactions           Transaction[]
  tasksAppliedFor        Task[]                  @relation("UserApplications")
  taskSubmissions        TaskSubmission[]
  taskActivity           TaskActivity[]
}

// TODO: Update contribution summary upon task completion/acceptance
model ContributionSummary {
  id             String @id @default(cuid())
  tasksCompleted Int    @default(0)
  activeTasks    Int    @default(0)
  totalEarnings  Float  @default(0.0)
  user           User   @relation(fields: [userId], references: [userId])
  userId         String @unique
  // averageRating  Float  @default(0.0)
  // projectIds     String[]  @default([])
  // projects       Project[] @relation(fields: [projectIds], references: [id])
}

model SubscriptionPackage {
  id          String    @id @default(cuid())
  name        String
  description String
  maxTasks    Int
  maxUsers    Int
  paid        Boolean   @default(true)
  price       Float
  active      Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  projects    Project[]
}

model Project {
  id                     String                  @id @default(cuid())
  name                   String
  description            String
  repoUrls               String[]
  walletAddress          String
  walletSecret           String
  escrowAddress          String
  escrowSecret           String
  subscriptionPackage    SubscriptionPackage?    @relation(fields: [subscriptionPackageId], references: [id])
  subscriptionPackageId  String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  tasks                  Task[]                  @relation("ProjectTasks")
  users                  User[]                  @relation("UserProjects")
  userProjectPermissions UserProjectPermission[]
  transactions           Transaction[]
  taskSubmissions        TaskSubmission[]
}

model Task {
  id              String           @id @default(cuid())
  issue           Json
  timeline        Float?           @default(0)
  timelineType    TimelineType?    @default(WEEK)
  bounty          Float            @default(0.0)
  status          TaskStatus       @default(OPEN)
  settled         Boolean          @default(false)
  applications    User[]           @relation("UserApplications")
  acceptedAt      DateTime?
  completedAt     DateTime?
  creator         User             @relation("TaskCreator", fields: [creatorId], references: [userId])
  creatorId       String
  contributor     User?            @relation("TaskContributor", fields: [contributorId], references: [userId])
  contributorId   String?
  project         Project          @relation("ProjectTasks", fields: [projectId], references: [id])
  projectId       String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  transactions    Transaction[]
  taskSubmissions TaskSubmission[]
  taskActivity    TaskActivity[]
}

model TaskSubmission {
  id            String         @id @default(cuid())
  user          User           @relation(fields: [userId], references: [userId])
  userId        String
  task          Task           @relation(fields: [taskId], references: [id])
  taskId        String
  project       Project        @relation(fields: [projectId], references: [id])
  projectId     String
  pullRequest   String
  attachmentUrl String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  taskActivity  TaskActivity[]

  @@unique([taskId, userId])
}

model TaskActivity {
  id               String          @id @default(cuid())
  task             Task            @relation(fields: [taskId], references: [id])
  taskId           String
  user             User?           @relation(fields: [userId], references: [userId])
  userId           String?
  taskSubmission   TaskSubmission? @relation(fields: [taskSubmissionId], references: [id])
  taskSubmissionId String?
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
}

model Permission {
  code                   String                  @id
  name                   String
  isDefault              Boolean
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  userProjectPermissions UserProjectPermission[] @relation("UserProjectPermissionPermissions")
}

model UserProjectPermission {
  id              String       @id @default(cuid())
  user            User         @relation(fields: [userId], references: [userId])
  userId          String
  project         Project      @relation(fields: [projectId], references: [id])
  projectId       String
  permissionCodes String[]
  assignedBy      String?
  assignedAt      DateTime     @default(now())
  permissions     Permission[] @relation("UserProjectPermissionPermissions")

  @@unique([userId, projectId])
}

model Transaction {
  id       String              @id @default(cuid())
  txHash   String
  category TransactionCategory
  amount   Float
  doneAt   DateTime            @default(now())

  // For BOUNTY transactions
  task   Task?   @relation(fields: [taskId], references: [id])
  taskId String?

  // For TOP_UP transactions
  sourceAddress String?

  // For WITHDRAWAL transactions
  destinationAddress String?

  // For TOP_UP and WITHDRAWAL transactions
  asset String?

  // For SWAP transactions
  assetFrom String?
  assetTo   String?

  project   Project? @relation(fields: [projectId], references: [id])
  projectId String?
  user      User?    @relation(fields: [userId], references: [userId])
  userId    String?
}
